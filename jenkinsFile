pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        SONARQUBE_SERVER = 'Sonarqube'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/imane-bouabidi/citronix_deploy.git', branch: 'main'
            }
        }

        stage('Start PostgreSQL') {
            steps {
                sh 'docker-compose up -d postgres'
                // Attendre que PostgreSQL soit prêt
                sh 'sleep 15'
            }
        }

        stage('Build and Test with Maven') {
            steps {
                // Exécuter les tests avec le profil de test
                sh 'export SPRING_PROFILES_ACTIVE=test
                                            mvn clean verify'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonarqube') {
                            sh '''
                            mvn sonar:sonar \
                                -Dsonar.projectKey=citronix \
                                -Dsonar.host.url=http://localhost:9000 \
                                -Dsonar.login=${SONARQUBE_SERVER}
                            '''
                        }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t imaneyoucode/citronix:${BUILD_NUMBER} .'
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry([credentialsId: 'docker-hub-credentials', url: '']) {
                    sh 'docker push imaneyoucode/citronix:${BUILD_NUMBER}'
                }
            }
        }

        stage('Deploy') {
            steps {
                sh 'docker-compose up -d app'
            }
        }
    }

    post {
        always {
            // Nettoyage
            sh 'docker-compose down'
            cleanWs()
        }
    }
}